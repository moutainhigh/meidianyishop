/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.shop.tables;


import com.meidianyi.shop.db.shop.Indexes;
import com.meidianyi.shop.db.shop.Keys;
import com.meidianyi.shop.db.shop.MiniShop_471752;
import com.meidianyi.shop.db.shop.tables.records.AssessTopicRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssessTopicRecord extends TableImpl<AssessTopicRecordRecord> {

    private static final long serialVersionUID = -2118958452;

    /**
     * The reference instance of <code>mini_shop_471752.b2c_assess_topic_record</code>
     */
    public static final AssessTopicRecord ASSESS_TOPIC_RECORD = new AssessTopicRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssessTopicRecordRecord> getRecordType() {
        return AssessTopicRecordRecord.class;
    }

    /**
     * The column <code>mini_shop_471752.b2c_assess_topic_record.id</code>.
     */
    public final TableField<AssessTopicRecordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_assess_topic_record.record_id</code>. 测评活动记录表关联ID
     */
    public final TableField<AssessTopicRecordRecord, Integer> RECORD_ID = createField("record_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "测评活动记录表关联ID");

    /**
     * The column <code>mini_shop_471752.b2c_assess_topic_record.topic_id</code>. 测评题目的ID
     */
    public final TableField<AssessTopicRecordRecord, Integer> TOPIC_ID = createField("topic_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "测评题目的ID");

    /**
     * The column <code>mini_shop_471752.b2c_assess_topic_record.topic_option</code>. 测评题目选项编号,多选的逗号隔开
     */
    public final TableField<AssessTopicRecordRecord, String> TOPIC_OPTION = createField("topic_option", org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "测评题目选项编号,多选的逗号隔开");

    /**
     * The column <code>mini_shop_471752.b2c_assess_topic_record.topic_point</code>. 测评得分
     */
    public final TableField<AssessTopicRecordRecord, Integer> TOPIC_POINT = createField("topic_point", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "测评得分");

    /**
     * The column <code>mini_shop_471752.b2c_assess_topic_record.result_id</code>. 测评结果ID
     */
    public final TableField<AssessTopicRecordRecord, Integer> RESULT_ID = createField("result_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "测评结果ID");

    /**
     * The column <code>mini_shop_471752.b2c_assess_topic_record.create_time</code>.
     */
    public final TableField<AssessTopicRecordRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_assess_topic_record.update_time</code>. 最后修改时间
     */
    public final TableField<AssessTopicRecordRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * Create a <code>mini_shop_471752.b2c_assess_topic_record</code> table reference
     */
    public AssessTopicRecord() {
        this(DSL.name("b2c_assess_topic_record"), null);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_assess_topic_record</code> table reference
     */
    public AssessTopicRecord(String alias) {
        this(DSL.name(alias), ASSESS_TOPIC_RECORD);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_assess_topic_record</code> table reference
     */
    public AssessTopicRecord(Name alias) {
        this(alias, ASSESS_TOPIC_RECORD);
    }

    private AssessTopicRecord(Name alias, Table<AssessTopicRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssessTopicRecord(Name alias, Table<AssessTopicRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AssessTopicRecord(Table<O> child, ForeignKey<O, AssessTopicRecordRecord> key) {
        super(child, key, ASSESS_TOPIC_RECORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSESS_TOPIC_RECORD_PRIMARY, Indexes.ASSESS_TOPIC_RECORD_RECORD_ID, Indexes.ASSESS_TOPIC_RECORD_RESULT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AssessTopicRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ASSESS_TOPIC_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssessTopicRecordRecord> getPrimaryKey() {
        return Keys.KEY_B2C_ASSESS_TOPIC_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssessTopicRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<AssessTopicRecordRecord>>asList(Keys.KEY_B2C_ASSESS_TOPIC_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssessTopicRecord as(String alias) {
        return new AssessTopicRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssessTopicRecord as(Name alias) {
        return new AssessTopicRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssessTopicRecord rename(String name) {
        return new AssessTopicRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssessTopicRecord rename(Name name) {
        return new AssessTopicRecord(name, null);
    }
}
