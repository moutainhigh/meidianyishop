/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.shop.tables;


import com.meidianyi.shop.db.shop.Indexes;
import com.meidianyi.shop.db.shop.Keys;
import com.meidianyi.shop.db.shop.MiniShop_471752;
import com.meidianyi.shop.db.shop.tables.records.DoctorTitleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 科室
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DoctorTitle extends TableImpl<DoctorTitleRecord> {

    private static final long serialVersionUID = 1691906510;

    /**
     * The reference instance of <code>mini_shop_471752.b2c_doctor_title</code>
     */
    public static final DoctorTitle DOCTOR_TITLE = new DoctorTitle();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorTitleRecord> getRecordType() {
        return DoctorTitleRecord.class;
    }

    /**
     * The column <code>mini_shop_471752.b2c_doctor_title.id</code>.
     */
    public final TableField<DoctorTitleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_title.name</code>. 职称名称
     */
    public final TableField<DoctorTitleRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "职称名称");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_title.code</code>. 职称代码
     */
    public final TableField<DoctorTitleRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "职称代码");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_title.first</code>. 优先级（越大越优先）
     */
    public final TableField<DoctorTitleRecord, Integer> FIRST = createField("first", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "优先级（越大越优先）");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_title.is_delete</code>.
     */
    public final TableField<DoctorTitleRecord, Byte> IS_DELETE = createField("is_delete", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_title.create_time</code>.
     */
    public final TableField<DoctorTitleRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_title.update_time</code>. 最后修改时间
     */
    public final TableField<DoctorTitleRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * Create a <code>mini_shop_471752.b2c_doctor_title</code> table reference
     */
    public DoctorTitle() {
        this(DSL.name("b2c_doctor_title"), null);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_doctor_title</code> table reference
     */
    public DoctorTitle(String alias) {
        this(DSL.name(alias), DOCTOR_TITLE);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_doctor_title</code> table reference
     */
    public DoctorTitle(Name alias) {
        this(alias, DOCTOR_TITLE);
    }

    private DoctorTitle(Name alias, Table<DoctorTitleRecord> aliased) {
        this(alias, aliased, null);
    }

    private DoctorTitle(Name alias, Table<DoctorTitleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("科室"));
    }

    public <O extends Record> DoctorTitle(Table<O> child, ForeignKey<O, DoctorTitleRecord> key) {
        super(child, key, DOCTOR_TITLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCTOR_TITLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DoctorTitleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCTOR_TITLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DoctorTitleRecord> getPrimaryKey() {
        return Keys.KEY_B2C_DOCTOR_TITLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DoctorTitleRecord>> getKeys() {
        return Arrays.<UniqueKey<DoctorTitleRecord>>asList(Keys.KEY_B2C_DOCTOR_TITLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorTitle as(String alias) {
        return new DoctorTitle(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorTitle as(Name alias) {
        return new DoctorTitle(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorTitle rename(String name) {
        return new DoctorTitle(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorTitle rename(Name name) {
        return new DoctorTitle(name, null);
    }
}
