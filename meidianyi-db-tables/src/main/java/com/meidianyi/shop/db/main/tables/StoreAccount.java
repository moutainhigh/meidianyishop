/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.main.tables;


import com.meidianyi.shop.db.main.Indexes;
import com.meidianyi.shop.db.main.Keys;
import com.meidianyi.shop.db.main.MiniMain;
import com.meidianyi.shop.db.main.tables.records.StoreAccountRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreAccount extends TableImpl<StoreAccountRecord> {

    private static final long serialVersionUID = -590002489;

    /**
     * The reference instance of <code>jmini_main.b2c_store_account</code>
     */
    public static final StoreAccount STORE_ACCOUNT = new StoreAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoreAccountRecord> getRecordType() {
        return StoreAccountRecord.class;
    }

    /**
     * The column <code>jmini_main.b2c_store_account.account_id</code>. 门店账号ID
     */
    public final TableField<StoreAccountRecord, Integer> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "门店账号ID");

    /**
     * The column <code>jmini_main.b2c_store_account.shop_id</code>. 所属店铺id
     */
    public final TableField<StoreAccountRecord, Integer> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "所属店铺id");

    /**
     * The column <code>jmini_main.b2c_store_account.sys_id</code>. 所属账户id
     */
    public final TableField<StoreAccountRecord, Integer> SYS_ID = createField("sys_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "所属账户id");

    /**
     * The column <code>jmini_main.b2c_store_account.mobile</code>. 手机号
     */
    public final TableField<StoreAccountRecord, String> MOBILE = createField("mobile", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "手机号");

    /**
     * The column <code>jmini_main.b2c_store_account.account_name</code>. 账户名称
     */
    public final TableField<StoreAccountRecord, String> ACCOUNT_NAME = createField("account_name", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "账户名称");

    /**
     * The column <code>jmini_main.b2c_store_account.wx_nick_name</code>. 门店账户绑定微信昵称
     */
    public final TableField<StoreAccountRecord, String> WX_NICK_NAME = createField("wx_nick_name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "门店账户绑定微信昵称");

    /**
     * The column <code>jmini_main.b2c_store_account.create_time</code>. 创建时间
     */
    public final TableField<StoreAccountRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>jmini_main.b2c_store_account.account_type</code>. 账户类型1:店员，2：店长
     */
    public final TableField<StoreAccountRecord, Byte> ACCOUNT_TYPE = createField("account_type", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "账户类型1:店员，2：店长");

    /**
     * The column <code>jmini_main.b2c_store_account.status</code>. 账户状态0:禁用，1：启用
     */
    public final TableField<StoreAccountRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "账户状态0:禁用，1：启用");

    /**
     * The column <code>jmini_main.b2c_store_account.del_flag</code>. 是否已删除0:否，1：是
     */
    public final TableField<StoreAccountRecord, Byte> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否已删除0:否，1：是");

    /**
     * The column <code>jmini_main.b2c_store_account.account_passwd</code>. 账号密码
     */
    public final TableField<StoreAccountRecord, String> ACCOUNT_PASSWD = createField("account_passwd", org.jooq.impl.SQLDataType.VARCHAR(64), this, "账号密码");

    /**
     * The column <code>jmini_main.b2c_store_account.store_list</code>. 可用门店id,逗号隔开
     */
    public final TableField<StoreAccountRecord, String> STORE_LIST = createField("store_list", org.jooq.impl.SQLDataType.VARCHAR(191), this, "可用门店id,逗号隔开");

    /**
     * The column <code>jmini_main.b2c_store_account.update_time</code>. 修改时间
     */
    public final TableField<StoreAccountRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改时间");

    /**
     * The column <code>jmini_main.b2c_store_account.user_id</code>. 关联用户Id
     */
    public final TableField<StoreAccountRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "关联用户Id");

    /**
     * The column <code>jmini_main.b2c_store_account.user_token</code>. 用户token
     */
    public final TableField<StoreAccountRecord, String> USER_TOKEN = createField("user_token", org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户token");

    /**
     * The column <code>jmini_main.b2c_store_account.official_open_id</code>. 公众号openid
     */
    public final TableField<StoreAccountRecord, String> OFFICIAL_OPEN_ID = createField("official_open_id", org.jooq.impl.SQLDataType.VARCHAR(128), this, "公众号openid");

    /**
     * The column <code>jmini_main.b2c_store_account.is_bind</code>. 是否已绑定
     */
    public final TableField<StoreAccountRecord, Byte> IS_BIND = createField("is_bind", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否已绑定");

    /**
     * The column <code>jmini_main.b2c_store_account.is_pharmacist</code>. 是否是药师
     */
    public final TableField<StoreAccountRecord, Byte> IS_PHARMACIST = createField("is_pharmacist", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "是否是药师");

    /**
     * The column <code>jmini_main.b2c_store_account.signature</code>. 药师签名
     */
    public final TableField<StoreAccountRecord, String> SIGNATURE = createField("signature", org.jooq.impl.SQLDataType.CLOB, this, "药师签名");

    /**
     * The column <code>jmini_main.b2c_store_account.auth_time</code>. 认证时间
     */
    public final TableField<StoreAccountRecord, Timestamp> AUTH_TIME = createField("auth_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "认证时间");

    /**
     * Create a <code>jmini_main.b2c_store_account</code> table reference
     */
    public StoreAccount() {
        this(DSL.name("b2c_store_account"), null);
    }

    /**
     * Create an aliased <code>jmini_main.b2c_store_account</code> table reference
     */
    public StoreAccount(String alias) {
        this(DSL.name(alias), STORE_ACCOUNT);
    }

    /**
     * Create an aliased <code>jmini_main.b2c_store_account</code> table reference
     */
    public StoreAccount(Name alias) {
        this(alias, STORE_ACCOUNT);
    }

    private StoreAccount(Name alias, Table<StoreAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private StoreAccount(Name alias, Table<StoreAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> StoreAccount(Table<O> child, ForeignKey<O, StoreAccountRecord> key) {
        super(child, key, STORE_ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STORE_ACCOUNT_ACCOUNT_NAME, Indexes.STORE_ACCOUNT_MOBILE, Indexes.STORE_ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StoreAccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STORE_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StoreAccountRecord> getPrimaryKey() {
        return Keys.KEY_B2C_STORE_ACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StoreAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<StoreAccountRecord>>asList(Keys.KEY_B2C_STORE_ACCOUNT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StoreAccount as(String alias) {
        return new StoreAccount(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StoreAccount as(Name alias) {
        return new StoreAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StoreAccount rename(String name) {
        return new StoreAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StoreAccount rename(Name name) {
        return new StoreAccount(name, null);
    }
}
