/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.main.tables;


import com.meidianyi.shop.db.main.Indexes;
import com.meidianyi.shop.db.main.Keys;
import com.meidianyi.shop.db.main.MiniMain;
import com.meidianyi.shop.db.main.tables.records.ShopVersionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShopVersion extends TableImpl<ShopVersionRecord> {

    private static final long serialVersionUID = 1046627205;

    /**
     * The reference instance of <code>mini_main.b2c_shop_version</code>
     */
    public static final ShopVersion SHOP_VERSION = new ShopVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopVersionRecord> getRecordType() {
        return ShopVersionRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_shop_version.id</code>.
     */
    public final TableField<ShopVersionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_shop_version.version_name</code>. 版本名称
     */
    public final TableField<ShopVersionRecord, String> VERSION_NAME = createField("version_name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "版本名称");

    /**
     * The column <code>mini_main.b2c_shop_version.level</code>. 版本级别
     */
    public final TableField<ShopVersionRecord, String> LEVEL = createField("level", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "版本级别");

    /**
     * The column <code>mini_main.b2c_shop_version.content</code>. 包含功能
     */
    public final TableField<ShopVersionRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "包含功能");

    /**
     * The column <code>mini_main.b2c_shop_version.created</code>. 操作时间
     */
    public final TableField<ShopVersionRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "操作时间");

    /**
     * The column <code>mini_main.b2c_shop_version.update_time</code>. 更新时间
     */
    public final TableField<ShopVersionRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新时间");

    /**
     * The column <code>mini_main.b2c_shop_version.desc</code>. 版本介绍
     */
    public final TableField<ShopVersionRecord, String> DESC = createField("desc", org.jooq.impl.SQLDataType.CLOB, this, "版本介绍");

    /**
     * The column <code>mini_main.b2c_shop_version.flag</code>. 0正常 1删除
     */
    public final TableField<ShopVersionRecord, Byte> FLAG = createField("flag", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0正常 1删除");

    /**
     * Create a <code>mini_main.b2c_shop_version</code> table reference
     */
    public ShopVersion() {
        this(DSL.name("b2c_shop_version"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_shop_version</code> table reference
     */
    public ShopVersion(String alias) {
        this(DSL.name(alias), SHOP_VERSION);
    }

    /**
     * Create an aliased <code>mini_main.b2c_shop_version</code> table reference
     */
    public ShopVersion(Name alias) {
        this(alias, SHOP_VERSION);
    }

    private ShopVersion(Name alias, Table<ShopVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShopVersion(Name alias, Table<ShopVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ShopVersion(Table<O> child, ForeignKey<O, ShopVersionRecord> key) {
        super(child, key, SHOP_VERSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHOP_VERSION_LEVEL, Indexes.SHOP_VERSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ShopVersionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SHOP_VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ShopVersionRecord> getPrimaryKey() {
        return Keys.KEY_B2C_SHOP_VERSION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ShopVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<ShopVersionRecord>>asList(Keys.KEY_B2C_SHOP_VERSION_PRIMARY, Keys.KEY_B2C_SHOP_VERSION_LEVEL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShopVersion as(String alias) {
        return new ShopVersion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShopVersion as(Name alias) {
        return new ShopVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopVersion rename(String name) {
        return new ShopVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopVersion rename(Name name) {
        return new ShopVersion(name, null);
    }
}
