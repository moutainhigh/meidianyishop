/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.shop.tables;


import com.meidianyi.shop.db.shop.Indexes;
import com.meidianyi.shop.db.shop.Keys;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import com.meidianyi.shop.db.shop.MiniShop_471752;
import com.meidianyi.shop.db.shop.tables.records.UserRemarkRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 会员备注
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRemark extends TableImpl<UserRemarkRecord> implements Table<UserRemarkRecord> {

    private static final long serialVersionUID = -2122130688;

    /**
     * The reference instance of <code>jmini_shop_471752.b2c_user_remark</code>
     */
    public static final UserRemark USER_REMARK = new UserRemark();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRemarkRecord> getRecordType() {
        return UserRemarkRecord.class;
    }

    /**
     * The column <code>jmini_shop_471752.b2c_user_remark.id</code>.
     */
    public final TableField<UserRemarkRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jmini_shop_471752.b2c_user_remark.user_id</code>.
     */
    public final TableField<UserRemarkRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jmini_shop_471752.b2c_user_remark.remark</code>. 会员备注
     */
    public final TableField<UserRemarkRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.CLOB, this, "会员备注");

    /**
     * The column <code>jmini_shop_471752.b2c_user_remark.add_time</code>.
     */
    public final TableField<UserRemarkRecord, Timestamp> ADD_TIME = createField("add_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jmini_shop_471752.b2c_user_remark.is_delete</code>. 0:未删除；1删除
     */
    public final TableField<UserRemarkRecord, Byte> IS_DELETE = createField("is_delete", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0:未删除；1删除");

    /**
     * Create a <code>jmini_shop_471752.b2c_user_remark</code> table reference
     */
    public UserRemark() {
        this(DSL.name("b2c_user_remark"), null);
    }

    /**
     * Create an aliased <code>jmini_shop_471752.b2c_user_remark</code> table reference
     */
    public UserRemark(String alias) {
        this(DSL.name(alias), USER_REMARK);
    }

    /**
     * Create an aliased <code>jmini_shop_471752.b2c_user_remark</code> table reference
     */
    public UserRemark(Name alias) {
        this(alias, USER_REMARK);
    }

    private UserRemark(Name alias, Table<UserRemarkRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserRemark(Name alias, Table<UserRemarkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("会员备注"));
    }

    public <O extends Record> UserRemark(Table<O> child, ForeignKey<O, UserRemarkRecord> key) {
        super(child, key, USER_REMARK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_REMARK_PRIMARY, Indexes.USER_REMARK_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRemarkRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_REMARK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRemarkRecord> getPrimaryKey() {
        return Keys.KEY_B2C_USER_REMARK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRemarkRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRemarkRecord>>asList(Keys.KEY_B2C_USER_REMARK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRemark as(String alias) {
        return new UserRemark(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRemark as(Name alias) {
        return new UserRemark(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRemark rename(String name) {
        return new UserRemark(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRemark rename(Name name) {
        return new UserRemark(name, null);
    }
}
