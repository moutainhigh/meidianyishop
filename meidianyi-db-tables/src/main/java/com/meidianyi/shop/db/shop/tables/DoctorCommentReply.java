/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.shop.tables;


import com.meidianyi.shop.db.shop.Indexes;
import com.meidianyi.shop.db.shop.Keys;
import com.meidianyi.shop.db.shop.MiniShop_471752;
import com.meidianyi.shop.db.shop.tables.records.DoctorCommentReplyRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 医师评价回复
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DoctorCommentReply extends TableImpl<DoctorCommentReplyRecord> {

    private static final long serialVersionUID = 87967644;

    /**
     * The reference instance of <code>mini_shop_471752.b2c_doctor_comment_reply</code>
     */
    public static final DoctorCommentReply DOCTOR_COMMENT_REPLY = new DoctorCommentReply();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorCommentReplyRecord> getRecordType() {
        return DoctorCommentReplyRecord.class;
    }

    /**
     * The column <code>mini_shop_471752.b2c_doctor_comment_reply.id</code>.
     */
    public final TableField<DoctorCommentReplyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_comment_reply.comment_id</code>. 医师评价表id
     */
    public final TableField<DoctorCommentReplyRecord, Integer> COMMENT_ID = createField("comment_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "医师评价表id");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_comment_reply.reply_note</code>. 回复内容
     */
    public final TableField<DoctorCommentReplyRecord, String> REPLY_NOTE = createField("reply_note", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "回复内容");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_comment_reply.is_delete</code>. 删除
     */
    public final TableField<DoctorCommentReplyRecord, Byte> IS_DELETE = createField("is_delete", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "删除");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_comment_reply.create_time</code>.
     */
    public final TableField<DoctorCommentReplyRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_comment_reply.update_time</code>. 最后修改时间
     */
    public final TableField<DoctorCommentReplyRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * Create a <code>mini_shop_471752.b2c_doctor_comment_reply</code> table reference
     */
    public DoctorCommentReply() {
        this(DSL.name("b2c_doctor_comment_reply"), null);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_doctor_comment_reply</code> table reference
     */
    public DoctorCommentReply(String alias) {
        this(DSL.name(alias), DOCTOR_COMMENT_REPLY);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_doctor_comment_reply</code> table reference
     */
    public DoctorCommentReply(Name alias) {
        this(alias, DOCTOR_COMMENT_REPLY);
    }

    private DoctorCommentReply(Name alias, Table<DoctorCommentReplyRecord> aliased) {
        this(alias, aliased, null);
    }

    private DoctorCommentReply(Name alias, Table<DoctorCommentReplyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("医师评价回复"));
    }

    public <O extends Record> DoctorCommentReply(Table<O> child, ForeignKey<O, DoctorCommentReplyRecord> key) {
        super(child, key, DOCTOR_COMMENT_REPLY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCTOR_COMMENT_REPLY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DoctorCommentReplyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCTOR_COMMENT_REPLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DoctorCommentReplyRecord> getPrimaryKey() {
        return Keys.KEY_B2C_DOCTOR_COMMENT_REPLY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DoctorCommentReplyRecord>> getKeys() {
        return Arrays.<UniqueKey<DoctorCommentReplyRecord>>asList(Keys.KEY_B2C_DOCTOR_COMMENT_REPLY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorCommentReply as(String alias) {
        return new DoctorCommentReply(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorCommentReply as(Name alias) {
        return new DoctorCommentReply(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorCommentReply rename(String name) {
        return new DoctorCommentReply(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorCommentReply rename(Name name) {
        return new DoctorCommentReply(name, null);
    }
}
