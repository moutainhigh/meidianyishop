/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.main.tables;


import com.meidianyi.shop.db.main.Indexes;
import com.meidianyi.shop.db.main.Keys;
import com.meidianyi.shop.db.main.MiniMain;
import com.meidianyi.shop.db.main.tables.records.SortRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sort extends TableImpl<SortRecord> {

    private static final long serialVersionUID = 1080519029;

    /**
     * The reference instance of <code>mini_main.b2c_sort</code>
     */
    public static final Sort SORT = new Sort();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SortRecord> getRecordType() {
        return SortRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_sort.sort_id</code>.
     */
    public final TableField<SortRecord, Integer> SORT_ID = createField("sort_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_sort.sort_name</code>.
     */
    public final TableField<SortRecord, String> SORT_NAME = createField("sort_name", org.jooq.impl.SQLDataType.VARCHAR(90).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mini_main.b2c_sort.parent_id</code>.
     */
    public final TableField<SortRecord, Short> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>mini_main.b2c_sort.level</code>.
     */
    public final TableField<SortRecord, Short> LEVEL = createField("level", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>mini_main.b2c_sort.has_child</code>.
     */
    public final TableField<SortRecord, Byte> HAS_CHILD = createField("has_child", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>mini_main.b2c_sort.create_time</code>.
     */
    public final TableField<SortRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_main.b2c_sort.sort_img</code>. 一级分类是头图 其他为分类图标
     */
    public final TableField<SortRecord, String> SORT_IMG = createField("sort_img", org.jooq.impl.SQLDataType.VARCHAR(191).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "一级分类是头图 其他为分类图标");

    /**
     * The column <code>mini_main.b2c_sort.img_link</code>. 图标或者头图链接
     */
    public final TableField<SortRecord, String> IMG_LINK = createField("img_link", org.jooq.impl.SQLDataType.VARCHAR(191).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "图标或者头图链接");

    /**
     * The column <code>mini_main.b2c_sort.first</code>. 优先级
     */
    public final TableField<SortRecord, Short> FIRST = createField("first", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "优先级");

    /**
     * The column <code>mini_main.b2c_sort.type</code>. 0普通商家分类 1推荐分类
     */
    public final TableField<SortRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0普通商家分类 1推荐分类");

    /**
     * The column <code>mini_main.b2c_sort.sort_desc</code>.
     */
    public final TableField<SortRecord, String> SORT_DESC = createField("sort_desc", org.jooq.impl.SQLDataType.VARCHAR(191).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mini_main.b2c_sort.keywords</code>.
     */
    public final TableField<SortRecord, String> KEYWORDS = createField("keywords", org.jooq.impl.SQLDataType.VARCHAR(191).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>mini_main.b2c_sort</code> table reference
     */
    public Sort() {
        this(DSL.name("b2c_sort"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_sort</code> table reference
     */
    public Sort(String alias) {
        this(DSL.name(alias), SORT);
    }

    /**
     * Create an aliased <code>mini_main.b2c_sort</code> table reference
     */
    public Sort(Name alias) {
        this(alias, SORT);
    }

    private Sort(Name alias, Table<SortRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sort(Name alias, Table<SortRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Sort(Table<O> child, ForeignKey<O, SortRecord> key) {
        super(child, key, SORT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SORT_PARENT_ID, Indexes.SORT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SortRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SORT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SortRecord> getPrimaryKey() {
        return Keys.KEY_B2C_SORT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SortRecord>> getKeys() {
        return Arrays.<UniqueKey<SortRecord>>asList(Keys.KEY_B2C_SORT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sort as(String alias) {
        return new Sort(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sort as(Name alias) {
        return new Sort(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sort rename(String name) {
        return new Sort(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sort rename(Name name) {
        return new Sort(name, null);
    }
}
