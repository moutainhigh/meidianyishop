/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.shop.tables;


import com.meidianyi.shop.db.shop.Indexes;
import com.meidianyi.shop.db.shop.Keys;
import com.meidianyi.shop.db.shop.MiniShop_471752;
import com.meidianyi.shop.db.shop.tables.records.DoctorWithdrawRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 医生返利提现申请表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DoctorWithdraw extends TableImpl<DoctorWithdrawRecord> {

    private static final long serialVersionUID = -897776804;

    /**
     * The reference instance of <code>mini_shop_471752.b2c_doctor_withdraw</code>
     */
    public static final DoctorWithdraw DOCTOR_WITHDRAW = new DoctorWithdraw();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorWithdrawRecord> getRecordType() {
        return DoctorWithdrawRecord.class;
    }

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.id</code>.
     */
    public final TableField<DoctorWithdrawRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.doctor_id</code>. 医师id
     */
    public final TableField<DoctorWithdrawRecord, Integer> DOCTOR_ID = createField("doctor_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "医师id");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.type</code>. 提现类型  1微信公众号钱包提现 2小程序
     */
    public final TableField<DoctorWithdrawRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "提现类型  1微信公众号钱包提现 2小程序");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.status</code>. 处理状态 1待审核 2拒绝 3已审核待出账 4出账成功
     */
    public final TableField<DoctorWithdrawRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "处理状态 1待审核 2拒绝 3已审核待出账 4出账成功");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.order_sn</code>. 提现单号
     */
    public final TableField<DoctorWithdrawRecord, String> ORDER_SN = createField("order_sn", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "提现单号");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.withdraw_user_num</code>. 用户提现序号
     */
    public final TableField<DoctorWithdrawRecord, String> WITHDRAW_USER_NUM = createField("withdraw_user_num", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户提现序号");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.withdraw_num</code>. 流水号
     */
    public final TableField<DoctorWithdrawRecord, String> WITHDRAW_NUM = createField("withdraw_num", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "流水号");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.withdraw_cash</code>. 提现金额
     */
    public final TableField<DoctorWithdrawRecord, BigDecimal> WITHDRAW_CASH = createField("withdraw_cash", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "提现金额");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.withdraw</code>. 可提现金额
     */
    public final TableField<DoctorWithdrawRecord, BigDecimal> WITHDRAW = createField("withdraw", org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "可提现金额");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.desc</code>. 备注
     */
    public final TableField<DoctorWithdrawRecord, String> DESC = createField("desc", org.jooq.impl.SQLDataType.CLOB, this, "备注");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.refuse_desc</code>. 驳回原因
     */
    public final TableField<DoctorWithdrawRecord, String> REFUSE_DESC = createField("refuse_desc", org.jooq.impl.SQLDataType.CLOB, this, "驳回原因");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.check_time</code>. 审核时间
     */
    public final TableField<DoctorWithdrawRecord, Timestamp> CHECK_TIME = createField("check_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "审核时间");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.refuse_time</code>. 驳回时间
     */
    public final TableField<DoctorWithdrawRecord, Timestamp> REFUSE_TIME = createField("refuse_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "驳回时间");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.billing_time</code>. 出账时间
     */
    public final TableField<DoctorWithdrawRecord, Timestamp> BILLING_TIME = createField("billing_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "出账时间");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.fail_time</code>. 失败时间
     */
    public final TableField<DoctorWithdrawRecord, Timestamp> FAIL_TIME = createField("fail_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "失败时间");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.desc_time</code>. 备注时间
     */
    public final TableField<DoctorWithdrawRecord, Timestamp> DESC_TIME = createField("desc_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "备注时间");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.withdraw_source</code>. 申请时提现配置
     */
    public final TableField<DoctorWithdrawRecord, String> WITHDRAW_SOURCE = createField("withdraw_source", org.jooq.impl.SQLDataType.CLOB, this, "申请时提现配置");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.real_name</code>. 真实姓名
     */
    public final TableField<DoctorWithdrawRecord, String> REAL_NAME = createField("real_name", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "真实姓名");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.create_time</code>.
     */
    public final TableField<DoctorWithdrawRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_withdraw.update_time</code>. 最后修改时间
     */
    public final TableField<DoctorWithdrawRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * Create a <code>mini_shop_471752.b2c_doctor_withdraw</code> table reference
     */
    public DoctorWithdraw() {
        this(DSL.name("b2c_doctor_withdraw"), null);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_doctor_withdraw</code> table reference
     */
    public DoctorWithdraw(String alias) {
        this(DSL.name(alias), DOCTOR_WITHDRAW);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_doctor_withdraw</code> table reference
     */
    public DoctorWithdraw(Name alias) {
        this(alias, DOCTOR_WITHDRAW);
    }

    private DoctorWithdraw(Name alias, Table<DoctorWithdrawRecord> aliased) {
        this(alias, aliased, null);
    }

    private DoctorWithdraw(Name alias, Table<DoctorWithdrawRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("医生返利提现申请表"));
    }

    public <O extends Record> DoctorWithdraw(Table<O> child, ForeignKey<O, DoctorWithdrawRecord> key) {
        super(child, key, DOCTOR_WITHDRAW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCTOR_WITHDRAW_DOCTOR_ID, Indexes.DOCTOR_WITHDRAW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DoctorWithdrawRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCTOR_WITHDRAW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DoctorWithdrawRecord> getPrimaryKey() {
        return Keys.KEY_B2C_DOCTOR_WITHDRAW_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DoctorWithdrawRecord>> getKeys() {
        return Arrays.<UniqueKey<DoctorWithdrawRecord>>asList(Keys.KEY_B2C_DOCTOR_WITHDRAW_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorWithdraw as(String alias) {
        return new DoctorWithdraw(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorWithdraw as(Name alias) {
        return new DoctorWithdraw(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorWithdraw rename(String name) {
        return new DoctorWithdraw(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorWithdraw rename(Name name) {
        return new DoctorWithdraw(name, null);
    }
}
