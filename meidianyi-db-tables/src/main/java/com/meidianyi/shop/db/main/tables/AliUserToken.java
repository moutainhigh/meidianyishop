/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.main.tables;


import com.meidianyi.shop.db.main.Indexes;
import com.meidianyi.shop.db.main.Keys;
import com.meidianyi.shop.db.main.MiniMain;
import com.meidianyi.shop.db.main.tables.records.AliUserTokenRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AliUserToken extends TableImpl<AliUserTokenRecord> {

    private static final long serialVersionUID = 729230890;

    /**
     * The reference instance of <code>mini_main.b2c_ali_user_token</code>
     */
    public static final AliUserToken ALI_USER_TOKEN = new AliUserToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AliUserTokenRecord> getRecordType() {
        return AliUserTokenRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_ali_user_token.rec_id</code>.
     */
    public final TableField<AliUserTokenRecord, Integer> REC_ID = createField("rec_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_ali_user_token.app_id</code>. 应用Id
     */
    public final TableField<AliUserTokenRecord, String> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.VARCHAR(191).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "应用Id");

    /**
     * The column <code>mini_main.b2c_ali_user_token.user_id</code>. 支付宝用户Id
     */
    public final TableField<AliUserTokenRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "支付宝用户Id");

    /**
     * The column <code>mini_main.b2c_ali_user_token.access_token</code>. 支付宝用户访问令牌
     */
    public final TableField<AliUserTokenRecord, String> ACCESS_TOKEN = createField("access_token", org.jooq.impl.SQLDataType.VARCHAR(191).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "支付宝用户访问令牌");

    /**
     * The column <code>mini_main.b2c_ali_user_token.expires_in_time</code>. 支付宝用户访问令牌过期时间
     */
    public final TableField<AliUserTokenRecord, Timestamp> EXPIRES_IN_TIME = createField("expires_in_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "支付宝用户访问令牌过期时间");

    /**
     * The column <code>mini_main.b2c_ali_user_token.refresh_token</code>. 支付宝用户刷新令牌
     */
    public final TableField<AliUserTokenRecord, String> REFRESH_TOKEN = createField("refresh_token", org.jooq.impl.SQLDataType.VARCHAR(191).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "支付宝用户刷新令牌");

    /**
     * The column <code>mini_main.b2c_ali_user_token.re_expires_in_time</code>. 支付宝用户刷新令牌过期时间
     */
    public final TableField<AliUserTokenRecord, Timestamp> RE_EXPIRES_IN_TIME = createField("re_expires_in_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "支付宝用户刷新令牌过期时间");

    /**
     * Create a <code>mini_main.b2c_ali_user_token</code> table reference
     */
    public AliUserToken() {
        this(DSL.name("b2c_ali_user_token"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_ali_user_token</code> table reference
     */
    public AliUserToken(String alias) {
        this(DSL.name(alias), ALI_USER_TOKEN);
    }

    /**
     * Create an aliased <code>mini_main.b2c_ali_user_token</code> table reference
     */
    public AliUserToken(Name alias) {
        this(alias, ALI_USER_TOKEN);
    }

    private AliUserToken(Name alias, Table<AliUserTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private AliUserToken(Name alias, Table<AliUserTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AliUserToken(Table<O> child, ForeignKey<O, AliUserTokenRecord> key) {
        super(child, key, ALI_USER_TOKEN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ALI_USER_TOKEN_APP_ID, Indexes.ALI_USER_TOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AliUserTokenRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ALI_USER_TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AliUserTokenRecord> getPrimaryKey() {
        return Keys.KEY_B2C_ALI_USER_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AliUserTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<AliUserTokenRecord>>asList(Keys.KEY_B2C_ALI_USER_TOKEN_PRIMARY, Keys.KEY_B2C_ALI_USER_TOKEN_APP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AliUserToken as(String alias) {
        return new AliUserToken(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AliUserToken as(Name alias) {
        return new AliUserToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AliUserToken rename(String name) {
        return new AliUserToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AliUserToken rename(Name name) {
        return new AliUserToken(name, null);
    }
}
