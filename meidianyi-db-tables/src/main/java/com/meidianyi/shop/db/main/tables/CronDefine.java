/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.main.tables;


import com.meidianyi.shop.db.main.Indexes;
import com.meidianyi.shop.db.main.Keys;
import com.meidianyi.shop.db.main.MiniMain;
import com.meidianyi.shop.db.main.tables.records.CronDefineRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * 定时任务定义表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class CronDefine extends TableImpl<CronDefineRecord> {

    private static final long serialVersionUID = 1649969223;

    /**
     * The reference instance of <code>mini_main.b2c_cron_define</code>
     */
    public static final CronDefine CRON_DEFINE = new CronDefine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CronDefineRecord> getRecordType() {
        return CronDefineRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_cron_define.id</code>. 主键id
     */
    public final TableField<CronDefineRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "主键id");

    /**
     * The column <code>mini_main.b2c_cron_define.class_name</code>. 定时任务完整类名
     */
    public final TableField<CronDefineRecord, String> CLASS_NAME = createField("class_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "定时任务完整类名");

    /**
     * The column <code>mini_main.b2c_cron_define.expression</code>. cron表达式
     */
    public final TableField<CronDefineRecord, String> EXPRESSION = createField("expression", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "cron表达式");

    /**
     * The column <code>mini_main.b2c_cron_define.description</code>. 任务描述
     */
    public final TableField<CronDefineRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "任务描述");

    /**
     * The column <code>mini_main.b2c_cron_define.result</code>. 执行结果,0:待执行;1:执行中；2已完成；3:执行失败
     */
    public final TableField<CronDefineRecord, Byte> RESULT = createField("result", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "执行结果,0:待执行;1:执行中；2已完成；3:执行失败");

    /**
     * The column <code>mini_main.b2c_cron_define.retries_num</code>. 失败重试次数,默认0不重试
     */
    public final TableField<CronDefineRecord, Byte> RETRIES_NUM = createField("retries_num", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "失败重试次数,默认0不重试");

    /**
     * The column <code>mini_main.b2c_cron_define.status</code>. 状态,1:启用;0:停用
     */
    public final TableField<CronDefineRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "状态,1:启用;0:停用");

    /**
     * The column <code>mini_main.b2c_cron_define.create_time</code>. 创建时间
     */
    public final TableField<CronDefineRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建时间");

    /**
     * The column <code>mini_main.b2c_cron_define.update_time</code>. 最后修改时间
     */
    public final TableField<CronDefineRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * Create a <code>mini_main.b2c_cron_define</code> table reference
     */
    public CronDefine() {
        this(DSL.name("b2c_cron_define"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_cron_define</code> table reference
     */
    public CronDefine(String alias) {
        this(DSL.name(alias), CRON_DEFINE);
    }

    /**
     * Create an aliased <code>mini_main.b2c_cron_define</code> table reference
     */
    public CronDefine(Name alias) {
        this(alias, CRON_DEFINE);
    }

    private CronDefine(Name alias, Table<CronDefineRecord> aliased) {
        this(alias, aliased, null);
    }

    private CronDefine(Name alias, Table<CronDefineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("定时任务定义表"));
    }

    public <O extends Record> CronDefine(Table<O> child, ForeignKey<O, CronDefineRecord> key) {
        super(child, key, CRON_DEFINE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CRON_DEFINE_CRON_KEY, Indexes.CRON_DEFINE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CronDefineRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CRON_DEFINE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CronDefineRecord> getPrimaryKey() {
        return Keys.KEY_B2C_CRON_DEFINE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CronDefineRecord>> getKeys() {
        return Arrays.<UniqueKey<CronDefineRecord>>asList(Keys.KEY_B2C_CRON_DEFINE_PRIMARY, Keys.KEY_B2C_CRON_DEFINE_CRON_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CronDefine as(String alias) {
        return new CronDefine(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CronDefine as(Name alias) {
        return new CronDefine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CronDefine rename(String name) {
        return new CronDefine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CronDefine rename(Name name) {
        return new CronDefine(name, null);
    }
}
