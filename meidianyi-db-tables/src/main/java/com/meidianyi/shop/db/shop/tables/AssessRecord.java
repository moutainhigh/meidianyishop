/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.shop.tables;


import com.meidianyi.shop.db.shop.Indexes;
import com.meidianyi.shop.db.shop.Keys;
import com.meidianyi.shop.db.shop.MiniShop_471752;
import com.meidianyi.shop.db.shop.tables.records.AssessRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssessRecord extends TableImpl<AssessRecordRecord> {

    private static final long serialVersionUID = 649863520;

    /**
     * The reference instance of <code>mini_shop_471752.b2c_assess_record</code>
     */
    public static final AssessRecord ASSESS_RECORD = new AssessRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssessRecordRecord> getRecordType() {
        return AssessRecordRecord.class;
    }

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.id</code>.
     */
    public final TableField<AssessRecordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.shop_id</code>. 店铺ID
     */
    public final TableField<AssessRecordRecord, Integer> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "店铺ID");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.user_id</code>. 会员ID
     */
    public final TableField<AssessRecordRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "会员ID");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.assess_id</code>. 测评活动ID
     */
    public final TableField<AssessRecordRecord, Integer> ASSESS_ID = createField("assess_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "测评活动ID");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.topic_id</code>. 测评得出结果的题目的ID
     */
    public final TableField<AssessRecordRecord, Integer> TOPIC_ID = createField("topic_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "测评得出结果的题目的ID");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.result_id</code>. 测评结果ID
     */
    public final TableField<AssessRecordRecord, Integer> RESULT_ID = createField("result_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "测评结果ID");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.assess_point</code>. 测评总得分或者题目的选项编号
     */
    public final TableField<AssessRecordRecord, String> ASSESS_POINT = createField("assess_point", org.jooq.impl.SQLDataType.VARCHAR(11).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "测评总得分或者题目的选项编号");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.create_time</code>.
     */
    public final TableField<AssessRecordRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.update_time</code>. 最后修改时间
     */
    public final TableField<AssessRecordRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.finish_time</code>. 测评完成时间
     */
    public final TableField<AssessRecordRecord, Timestamp> FINISH_TIME = createField("finish_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "测评完成时间");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.del_flag</code>. 删除标识：0未删除，1已删除
     */
    public final TableField<AssessRecordRecord, Byte> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "删除标识：0未删除，1已删除");

    /**
     * The column <code>mini_shop_471752.b2c_assess_record.state_status</code>. 测评状态：0测评中，1测评完成待领取奖励，2测评完成已领取，3领取失效，4测评失败
     */
    public final TableField<AssessRecordRecord, Byte> STATE_STATUS = createField("state_status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "测评状态：0测评中，1测评完成待领取奖励，2测评完成已领取，3领取失效，4测评失败");

    /**
     * Create a <code>mini_shop_471752.b2c_assess_record</code> table reference
     */
    public AssessRecord() {
        this(DSL.name("b2c_assess_record"), null);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_assess_record</code> table reference
     */
    public AssessRecord(String alias) {
        this(DSL.name(alias), ASSESS_RECORD);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_assess_record</code> table reference
     */
    public AssessRecord(Name alias) {
        this(alias, ASSESS_RECORD);
    }

    private AssessRecord(Name alias, Table<AssessRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private AssessRecord(Name alias, Table<AssessRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AssessRecord(Table<O> child, ForeignKey<O, AssessRecordRecord> key) {
        super(child, key, ASSESS_RECORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSESS_RECORD_ASSESS_ID, Indexes.ASSESS_RECORD_PRIMARY, Indexes.ASSESS_RECORD_SHOP_ID, Indexes.ASSESS_RECORD_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AssessRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ASSESS_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssessRecordRecord> getPrimaryKey() {
        return Keys.KEY_B2C_ASSESS_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssessRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<AssessRecordRecord>>asList(Keys.KEY_B2C_ASSESS_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssessRecord as(String alias) {
        return new AssessRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AssessRecord as(Name alias) {
        return new AssessRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AssessRecord rename(String name) {
        return new AssessRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AssessRecord rename(Name name) {
        return new AssessRecord(name, null);
    }
}
