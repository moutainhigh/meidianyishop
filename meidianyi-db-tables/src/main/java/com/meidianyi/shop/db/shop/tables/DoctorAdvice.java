/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.shop.tables;


import com.meidianyi.shop.db.shop.Indexes;
import com.meidianyi.shop.db.shop.Keys;
import com.meidianyi.shop.db.shop.MiniShop_471752;
import com.meidianyi.shop.db.shop.tables.records.DoctorAdviceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 医嘱表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DoctorAdvice extends TableImpl<DoctorAdviceRecord> {

    private static final long serialVersionUID = 642373333;

    /**
     * The reference instance of <code>mini_shop_471752.b2c_doctor_advice</code>
     */
    public static final DoctorAdvice DOCTOR_ADVICE = new DoctorAdvice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DoctorAdviceRecord> getRecordType() {
        return DoctorAdviceRecord.class;
    }

    /**
     * The column <code>mini_shop_471752.b2c_doctor_advice.id</code>.
     */
    public final TableField<DoctorAdviceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_doctor_advice.prescription_item_id</code>. 处方明细表id
     */
    public final TableField<DoctorAdviceRecord, Integer> PRESCRIPTION_ITEM_ID = createField("prescription_item_id", org.jooq.impl.SQLDataType.INTEGER, this, "处方明细表id");

    /**
     * Create a <code>mini_shop_471752.b2c_doctor_advice</code> table reference
     */
    public DoctorAdvice() {
        this(DSL.name("b2c_doctor_advice"), null);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_doctor_advice</code> table reference
     */
    public DoctorAdvice(String alias) {
        this(DSL.name(alias), DOCTOR_ADVICE);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_doctor_advice</code> table reference
     */
    public DoctorAdvice(Name alias) {
        this(alias, DOCTOR_ADVICE);
    }

    private DoctorAdvice(Name alias, Table<DoctorAdviceRecord> aliased) {
        this(alias, aliased, null);
    }

    private DoctorAdvice(Name alias, Table<DoctorAdviceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("医嘱表"));
    }

    public <O extends Record> DoctorAdvice(Table<O> child, ForeignKey<O, DoctorAdviceRecord> key) {
        super(child, key, DOCTOR_ADVICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOCTOR_ADVICE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DoctorAdviceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DOCTOR_ADVICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DoctorAdviceRecord> getPrimaryKey() {
        return Keys.KEY_B2C_DOCTOR_ADVICE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DoctorAdviceRecord>> getKeys() {
        return Arrays.<UniqueKey<DoctorAdviceRecord>>asList(Keys.KEY_B2C_DOCTOR_ADVICE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorAdvice as(String alias) {
        return new DoctorAdvice(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DoctorAdvice as(Name alias) {
        return new DoctorAdvice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorAdvice rename(String name) {
        return new DoctorAdvice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DoctorAdvice rename(Name name) {
        return new DoctorAdvice(name, null);
    }
}
