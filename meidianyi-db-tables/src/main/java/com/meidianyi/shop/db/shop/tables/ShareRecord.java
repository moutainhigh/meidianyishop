/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.shop.tables;


import com.meidianyi.shop.db.shop.Indexes;
import com.meidianyi.shop.db.shop.Keys;
import com.meidianyi.shop.db.shop.MiniShop_471752;
import com.meidianyi.shop.db.shop.tables.records.ShareRecordRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShareRecord extends TableImpl<ShareRecordRecord> {

    private static final long serialVersionUID = 601909567;

    /**
     * The reference instance of <code>mini_shop_471752.b2c_share_record</code>
     */
    public static final ShareRecord SHARE_RECORD = new ShareRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShareRecordRecord> getRecordType() {
        return ShareRecordRecord.class;
    }

    /**
     * The column <code>mini_shop_471752.b2c_share_record.id</code>.
     */
    public final TableField<ShareRecordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_share_record.activity_id</code>. 活动id或商品id
     */
    public final TableField<ShareRecordRecord, Integer> ACTIVITY_ID = createField("activity_id", org.jooq.impl.SQLDataType.INTEGER, this, "活动id或商品id");

    /**
     * The column <code>mini_shop_471752.b2c_share_record.user_id</code>.
     */
    public final TableField<ShareRecordRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mini_shop_471752.b2c_share_record.activity_type</code>. 活动类型
     */
    public final TableField<ShareRecordRecord, Integer> ACTIVITY_TYPE = createField("activity_type", org.jooq.impl.SQLDataType.INTEGER, this, "活动类型");

    /**
     * The column <code>mini_shop_471752.b2c_share_record.count</code>. 次数
     */
    public final TableField<ShareRecordRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER, this, "次数");

    /**
     * The column <code>mini_shop_471752.b2c_share_record.create_time</code>.
     */
    public final TableField<ShareRecordRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>mini_shop_471752.b2c_share_record.update_time</code>. 最后修改时间
     */
    public final TableField<ShareRecordRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * Create a <code>mini_shop_471752.b2c_share_record</code> table reference
     */
    public ShareRecord() {
        this(DSL.name("b2c_share_record"), null);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_share_record</code> table reference
     */
    public ShareRecord(String alias) {
        this(DSL.name(alias), SHARE_RECORD);
    }

    /**
     * Create an aliased <code>mini_shop_471752.b2c_share_record</code> table reference
     */
    public ShareRecord(Name alias) {
        this(alias, SHARE_RECORD);
    }

    private ShareRecord(Name alias, Table<ShareRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShareRecord(Name alias, Table<ShareRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ShareRecord(Table<O> child, ForeignKey<O, ShareRecordRecord> key) {
        super(child, key, SHARE_RECORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniShop_471752.MINI_SHOP_471752;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHARE_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ShareRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SHARE_RECORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ShareRecordRecord> getPrimaryKey() {
        return Keys.KEY_B2C_SHARE_RECORD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ShareRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<ShareRecordRecord>>asList(Keys.KEY_B2C_SHARE_RECORD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShareRecord as(String alias) {
        return new ShareRecord(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShareRecord as(Name alias) {
        return new ShareRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShareRecord rename(String name) {
        return new ShareRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShareRecord rename(Name name) {
        return new ShareRecord(name, null);
    }
}
