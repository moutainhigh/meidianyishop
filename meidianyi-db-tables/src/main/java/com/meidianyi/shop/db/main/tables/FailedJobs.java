/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.main.tables;


import com.meidianyi.shop.db.main.Indexes;
import com.meidianyi.shop.db.main.Keys;
import com.meidianyi.shop.db.main.MiniMain;
import com.meidianyi.shop.db.main.tables.records.FailedJobsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FailedJobs extends TableImpl<FailedJobsRecord> {

    private static final long serialVersionUID = -1889049331;

    /**
     * The reference instance of <code>mini_main.b2c_failed_jobs</code>
     */
    public static final FailedJobs FAILED_JOBS = new FailedJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FailedJobsRecord> getRecordType() {
        return FailedJobsRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_failed_jobs.id</code>.
     */
    public final TableField<FailedJobsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.connection</code>.
     */
    public final TableField<FailedJobsRecord, String> CONNECTION = createField("connection", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.queue</code>.
     */
    public final TableField<FailedJobsRecord, String> QUEUE = createField("queue", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.payload</code>.
     */
    public final TableField<FailedJobsRecord, String> PAYLOAD = createField("payload", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.exception</code>.
     */
    public final TableField<FailedJobsRecord, String> EXCEPTION = createField("exception", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mini_main.b2c_failed_jobs.failed_at</code>.
     */
    public final TableField<FailedJobsRecord, Timestamp> FAILED_AT = createField("failed_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>mini_main.b2c_failed_jobs</code> table reference
     */
    public FailedJobs() {
        this(DSL.name("b2c_failed_jobs"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_failed_jobs</code> table reference
     */
    public FailedJobs(String alias) {
        this(DSL.name(alias), FAILED_JOBS);
    }

    /**
     * Create an aliased <code>mini_main.b2c_failed_jobs</code> table reference
     */
    public FailedJobs(Name alias) {
        this(alias, FAILED_JOBS);
    }

    private FailedJobs(Name alias, Table<FailedJobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FailedJobs(Name alias, Table<FailedJobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FailedJobs(Table<O> child, ForeignKey<O, FailedJobsRecord> key) {
        super(child, key, FAILED_JOBS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FAILED_JOBS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FailedJobsRecord, Long> getIdentity() {
        return Keys.IDENTITY_FAILED_JOBS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FailedJobsRecord> getPrimaryKey() {
        return Keys.KEY_B2C_FAILED_JOBS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FailedJobsRecord>> getKeys() {
        return Arrays.<UniqueKey<FailedJobsRecord>>asList(Keys.KEY_B2C_FAILED_JOBS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FailedJobs as(String alias) {
        return new FailedJobs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FailedJobs as(Name alias) {
        return new FailedJobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FailedJobs rename(String name) {
        return new FailedJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FailedJobs rename(Name name) {
        return new FailedJobs(name, null);
    }
}
