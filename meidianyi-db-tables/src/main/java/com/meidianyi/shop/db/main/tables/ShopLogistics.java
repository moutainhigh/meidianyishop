/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.main.tables;


import com.meidianyi.shop.db.main.Indexes;
import com.meidianyi.shop.db.main.Keys;
import com.meidianyi.shop.db.main.MiniMain;
import com.meidianyi.shop.db.main.tables.records.ShopLogisticsRecord;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 店铺物流信息表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShopLogistics extends TableImpl<ShopLogisticsRecord> {

    private static final long serialVersionUID = 1169833283;

    /**
     * The reference instance of <code>jmini_main.b2c_shop_logistics</code>
     */
    public static final ShopLogistics SHOP_LOGISTICS = new ShopLogistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopLogisticsRecord> getRecordType() {
        return ShopLogisticsRecord.class;
    }

    /**
     * The column <code>jmini_main.b2c_shop_logistics.id</code>.
     */
    public final TableField<ShopLogisticsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>jmini_main.b2c_shop_logistics.shop_id</code>. 店铺Id
     */
    public final TableField<ShopLogisticsRecord, Integer> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "店铺Id");

    /**
     * The column <code>jmini_main.b2c_shop_logistics.logistic_name</code>. 快递公司名称
     */
    public final TableField<ShopLogisticsRecord, String> LOGISTIC_NAME = createField("logistic_name", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "快递公司名称");

    /**
     * The column <code>jmini_main.b2c_shop_logistics.logistic_type</code>. 快递100type字段
     */
    public final TableField<ShopLogisticsRecord, String> LOGISTIC_TYPE = createField("logistic_type", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "快递100type字段");

    /**
     * The column <code>jmini_main.b2c_shop_logistics.shipping_code</code>.
     */
    public final TableField<ShopLogisticsRecord, String> SHIPPING_CODE = createField("shipping_code", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jmini_main.b2c_shop_logistics.create_time</code>.
     */
    public final TableField<ShopLogisticsRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jmini_main.b2c_shop_logistics.update_time</code>. 最后修改时间
     */
    public final TableField<ShopLogisticsRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "最后修改时间");

    /**
     * The column <code>jmini_main.b2c_shop_logistics.del_flag</code>. 0:未删除，1:已删除
     */
    public final TableField<ShopLogisticsRecord, Byte> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0:未删除，1:已删除");

    /**
     * Create a <code>jmini_main.b2c_shop_logistics</code> table reference
     */
    public ShopLogistics() {
        this(DSL.name("b2c_shop_logistics"), null);
    }

    /**
     * Create an aliased <code>jmini_main.b2c_shop_logistics</code> table reference
     */
    public ShopLogistics(String alias) {
        this(DSL.name(alias), SHOP_LOGISTICS);
    }

    /**
     * Create an aliased <code>jmini_main.b2c_shop_logistics</code> table reference
     */
    public ShopLogistics(Name alias) {
        this(alias, SHOP_LOGISTICS);
    }

    private ShopLogistics(Name alias, Table<ShopLogisticsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShopLogistics(Name alias, Table<ShopLogisticsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("店铺物流信息表"));
    }

    public <O extends Record> ShopLogistics(Table<O> child, ForeignKey<O, ShopLogisticsRecord> key) {
        super(child, key, SHOP_LOGISTICS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHOP_LOGISTICS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ShopLogisticsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SHOP_LOGISTICS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ShopLogisticsRecord> getPrimaryKey() {
        return Keys.KEY_B2C_SHOP_LOGISTICS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ShopLogisticsRecord>> getKeys() {
        return Arrays.<UniqueKey<ShopLogisticsRecord>>asList(Keys.KEY_B2C_SHOP_LOGISTICS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShopLogistics as(String alias) {
        return new ShopLogistics(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShopLogistics as(Name alias) {
        return new ShopLogistics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopLogistics rename(String name) {
        return new ShopLogistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopLogistics rename(Name name) {
        return new ShopLogistics(name, null);
    }
}
