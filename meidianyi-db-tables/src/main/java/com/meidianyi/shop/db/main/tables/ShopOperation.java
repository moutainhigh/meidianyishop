/*
 * This file is generated by jOOQ.
 */
package com.meidianyi.shop.db.main.tables;


import com.meidianyi.shop.db.main.Indexes;
import com.meidianyi.shop.db.main.Keys;
import com.meidianyi.shop.db.main.MiniMain;
import com.meidianyi.shop.db.main.tables.records.ShopOperationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShopOperation extends TableImpl<ShopOperationRecord> {

    private static final long serialVersionUID = 2067588265;

    /**
     * The reference instance of <code>mini_main.b2c_shop_operation</code>
     */
    public static final ShopOperation SHOP_OPERATION = new ShopOperation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopOperationRecord> getRecordType() {
        return ShopOperationRecord.class;
    }

    /**
     * The column <code>mini_main.b2c_shop_operation.id</code>. 操作id
     */
    public final TableField<ShopOperationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "操作id");

    /**
     * The column <code>mini_main.b2c_shop_operation.shop_id</code>. 店铺ID
     */
    public final TableField<ShopOperationRecord, Integer> SHOP_ID = createField("shop_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "店铺ID");

    /**
     * The column <code>mini_main.b2c_shop_operation.operator_id</code>. 操作员id
     */
    public final TableField<ShopOperationRecord, Integer> OPERATOR_ID = createField("operator_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "操作员id");

    /**
     * The column <code>mini_main.b2c_shop_operation.operator</code>. 操作员
     */
    public final TableField<ShopOperationRecord, String> OPERATOR = createField("operator", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "操作员");

    /**
     * The column <code>mini_main.b2c_shop_operation.created</code>. 操作时间
     */
    public final TableField<ShopOperationRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "操作时间");

    /**
     * The column <code>mini_main.b2c_shop_operation.desc</code>. 操作描述
     */
    public final TableField<ShopOperationRecord, String> DESC = createField("desc", org.jooq.impl.SQLDataType.CLOB, this, "操作描述");

    /**
     * The column <code>mini_main.b2c_shop_operation.ip</code>. 操作ip
     */
    public final TableField<ShopOperationRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "操作ip");

    /**
     * The column <code>mini_main.b2c_shop_operation.type</code>. 记录类型 0 店铺 1 账号
     */
    public final TableField<ShopOperationRecord, Byte> TYPE = createField("type", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "记录类型 0 店铺 1 账号");

    /**
     * Create a <code>mini_main.b2c_shop_operation</code> table reference
     */
    public ShopOperation() {
        this(DSL.name("b2c_shop_operation"), null);
    }

    /**
     * Create an aliased <code>mini_main.b2c_shop_operation</code> table reference
     */
    public ShopOperation(String alias) {
        this(DSL.name(alias), SHOP_OPERATION);
    }

    /**
     * Create an aliased <code>mini_main.b2c_shop_operation</code> table reference
     */
    public ShopOperation(Name alias) {
        this(alias, SHOP_OPERATION);
    }

    private ShopOperation(Name alias, Table<ShopOperationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShopOperation(Name alias, Table<ShopOperationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ShopOperation(Table<O> child, ForeignKey<O, ShopOperationRecord> key) {
        super(child, key, SHOP_OPERATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MiniMain.MINI_MAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHOP_OPERATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ShopOperationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SHOP_OPERATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ShopOperationRecord> getPrimaryKey() {
        return Keys.KEY_B2C_SHOP_OPERATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ShopOperationRecord>> getKeys() {
        return Arrays.<UniqueKey<ShopOperationRecord>>asList(Keys.KEY_B2C_SHOP_OPERATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShopOperation as(String alias) {
        return new ShopOperation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ShopOperation as(Name alias) {
        return new ShopOperation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopOperation rename(String name) {
        return new ShopOperation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopOperation rename(Name name) {
        return new ShopOperation(name, null);
    }
}
